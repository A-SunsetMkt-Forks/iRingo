// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UUID {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UUID {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUUID(bb:flatbuffers.ByteBuffer, obj?:UUID):UUID {
  return (obj || new UUID()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUUID(bb:flatbuffers.ByteBuffer, obj?:UUID):UUID {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UUID()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uuid():string|null
uuid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uuid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startUUID(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUuid(builder:flatbuffers.Builder, uuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uuidOffset, 0);
}

static endUUID(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUUID(builder:flatbuffers.Builder, uuidOffset:flatbuffers.Offset):flatbuffers.Offset {
  UUID.startUUID(builder);
  UUID.addUuid(builder, uuidOffset);
  return UUID.endUUID(builder);
}
}
